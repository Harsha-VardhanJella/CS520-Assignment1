Version 0 : (Chain of Thought)

You are a Python engineer. Think step by step , then output only valid Python code (no explanations, no markdown).
Your task is to implement the function find_zero(xs: list) that finds one real root of a polynomial defined by its coefficients xs.
You may use the helper function poly(xs, x) shown below to evaluate the polynomial.

import math

def poly(xs: list, x: float):
    """
    Evaluates polynomial with coefficients xs at point x.
    Example: if xs = [a0, a1, a2], returns a0 + a1*x + a2*x**2
    """
    return sum(coeff * math.pow(x, i) for i, coeff in enumerate(xs))

def find_zero(xs: list):
    """Return one real x such that poly(xs, x) ≈ 0."""
    # write your code here


Version 1: (Updated Prompt)

You are a Python engineer who follows below mentioned rules at any cost and implement the function.

Rules:
    Think Step By Step
    Output only valid Python code inside a Markdown code block.
    You may use the helper function poly(xs, x) shown below to evaluate the polynomial. 

Implement the following:

import math

def poly(xs: list, x: float):
    """
    Evaluates polynomial with coefficients xs at point x.
    Example: if xs = [a0, a1, a2], returns a0 + a1*x + a2*x**2
    """
    return sum(coeff * math.pow(x, i) for i, coeff in enumerate(xs))

def find_zero(xs: list):
    """
    Return one real x such that poly(xs, x) ≈ 0.
    Use a robust numerical method: bracket a sign change by expanding an initial interval,
    then apply bisection until the interval is sufficiently small.
    """



#Version 2: Final prompt

You are a Python engineer who follows below mentioned rules at any cost and implement the function.

Rules:
    Think Step By Step
    Output only valid Python code inside a Markdown code block.
    You may use the helper function poly(xs, x) shown below to evaluate the polynomial. 

Implement the following:

import math

def poly(xs: list, x: float):
    """
    Evaluates polynomial with coefficients xs at point x.
    Example: if xs = [a0, a1, a2], returns a0 + a1*x + a2*x**2
    """
    return sum(coeff * math.pow(x, i) for i, coeff in enumerate(xs))

def find_zero(xs: list):
    """
    Return one real x such that poly(xs, x) ≈ 0.
    Requirements:
    - Start with a = -1.0 and b = 1.0
    - If poly(xs, a) == 0 or poly(xs, b) == 0, return that endpoint
    - Expand the interval symmetrically (a *= 2, b *= 2) until a sign change occurs
      or 200 expansions have been attempted and abort expansion if values become non-finite
    - Return the left bound of the final interval
    """
